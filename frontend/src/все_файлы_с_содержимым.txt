=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\api.js ===
import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api';

const apiInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 5000,
});

apiInstance.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});


// Добавляем все необходимые методы
export default {
  // Альбомы
  getAlbums() {
    return apiInstance.get('/albums');
  },

  getAlbum(id) {
    return apiInstance.get(`/albums/${id}`);
  },

  // Артисты
  getArtist(id) {
    return apiInstance.get(`/artists/${id}`);
  },


  // Добавим в api.js (если еще нет):
  removeFromCart(itemId) {
    return apiInstance.delete(`/cart/${itemId}`);
  },

  getArtistWithAlbums(artistId) {
    return apiInstance.get(`/artists/${artistId}/albums`);
  },

  getArtistsByCategory(category) {
    return apiInstance.get(`/artists/${category}`);
  },

  getArtistCategories() {
    return apiInstance.get('/artist_categories');
  },

  // Авторизация
  register: async (email, password, firstName, lastName) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/register`, {
        email,
        password,
        first_name: firstName,
        last_name: lastName
      });
      return response.data;
    } catch (error) {
      throw error.response?.data || { message: 'Registration failed' };
    }
  },

  login: async (email, password) => {
  try {
    const response = await apiInstance.post('/login', { email, password });
    localStorage.setItem('token', response.data.access_token);
    localStorage.setItem('userData', JSON.stringify({
      id: response.data.user_id,
      email: response.data.email,
      isAdmin: response.data.is_admin
    }));
    return response.data;
  } catch (error) {
    throw error.response?.data || { message: 'Login failed' };
  }
},
logout: () => {
  localStorage.removeItem('token');
  localStorage.removeItem('userData');
},

  // Корзина
  getCart() {
    return apiInstance.get('/cart');
  },

  addToCart(versionId, quantity = 1) {
    return apiInstance.post('/cart', { version_id: versionId, quantity });
  },

  // Избранное
  getWishlist() {
    return apiInstance.get('/wishlist');
  },

  addToWishlist(albumId) {
    return apiInstance.post('/wishlist', { album_id: albumId });
  },

  removeFromWishlist(albumId) {
    return apiInstance.delete(`/wishlist/${albumId}`);
  }
};

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.css ===
/* Базовые стили для всего приложения */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: 'Arial', sans-serif;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main-content {
  flex: 1;
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.js ===
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar/Navbar';
import PopupAuth from './components/PopupAuth/PopupAuth';
import Home from './pages/Home/Home';
import Catalog from './pages/Catalog/Catalog';
import Product from './pages/Product/Product';
import Cart from './pages/Cart/Cart';
import AdminPanel from './pages/AdminPanel/AdminPanel';
import Profile from './pages/Profile/Profile';
import Wishlist from './pages/Wishlist/Wishlist';
import ArtistPage from './pages/ArtistPage/ArtistPage';
import './App.css';

function App() {
  const [isAuthPopupOpen, setAuthPopupOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);

  // Проверяем localStorage при загрузке
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      const userData = JSON.parse(localStorage.getItem('userData'));
      setCurrentUser(userData);
    }
  }, []);

  // Обработчик входа
  const handleLogin = (userData) => {
    localStorage.setItem('token', userData.access_token);
    localStorage.setItem('userData', JSON.stringify(userData));
    setCurrentUser(userData);
    setAuthPopupOpen(false);
  };

  // Обработчик выхода
  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userData');
    setCurrentUser(null);
  };

  // Защищенный роут
  const ProtectedRoute = ({ children, adminOnly = false }) => {
    if (!currentUser) {
      setAuthPopupOpen(true);
      return <Navigate to="/" />;
    }
    
    if (adminOnly && !currentUser.is_admin) {
      return <Navigate to="/" />;
    }

    return children;
  };

  return (
    <Router>
      <div className="app">
        <Navbar
          currentUser={currentUser}
          onAuthClick={() => setAuthPopupOpen(true)}
          onLogout={handleLogout}
        />

        {isAuthPopupOpen && (
          <PopupAuth
            onClose={() => setAuthPopupOpen(false)}
            onLogin={handleLogin}
          />
        )}

        <main className="main-content">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/artist/:id" element={<ArtistPage />} />
            <Route path="/catalog" element={<Catalog />} />
            <Route
              path="/admin"
              element={
                <ProtectedRoute>
                  <AdminPanel />
                </ProtectedRoute>
              }
            />
            <Route
              path="/album/:id"
              element={
                <Product currentUser={currentUser} />
              }
            />

            <Route path="/cart" element={
              <ProtectedRoute>
                <Cart />
              </ProtectedRoute>
            } />

            <Route path="/profile" element={
              <ProtectedRoute>
                <Profile user={currentUser} />
              </ProtectedRoute>
            } />

            <Route path="/wishlist" element={
              <ProtectedRoute>
                <Wishlist />
              </ProtectedRoute>
            } />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.test.js ===
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\index.css ===
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\logo.svg ===
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\reportWebVitals.js ===
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\setupTests.js ===
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\все_файлы_с_содержимым.txt ===
=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\api.js ===
import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api';

const apiInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 5000,
});

apiInstance.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});


// Добавляем все необходимые методы
export default {
  // Альбомы
  getAlbums() {
    return apiInstance.get('/albums');
  },

  getAlbum(id) {
    return apiInstance.get(`/albums/${id}`);
  },

  // Артисты
  getArtist(id) {
    return apiInstance.get(`/artists/${id}`);
  },


  // Добавим в api.js (если еще нет):
  removeFromCart(itemId) {
    return apiInstance.delete(`/cart/${itemId}`);
  },

  getArtistWithAlbums(artistId) {
    return apiInstance.get(`/artists/${artistId}/albums`);
  },

  getArtistsByCategory(category) {
    return apiInstance.get(`/artists/${category}`);
  },

  getArtistCategories() {
    return apiInstance.get('/artist_categories');
  },

  // Авторизация
  register: async (email, password, firstName, lastName) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/register`, {
        email,
        password,
        first_name: firstName,
        last_name: lastName
      });
      return response.data;
    } catch (error) {
      throw error.response?.data || { message: 'Registration failed' };
    }
  },

  login: async (email, password) => {
  try {
    const response = await apiInstance.post('/login', { email, password });
    localStorage.setItem('token', response.data.access_token);
    localStorage.setItem('userData', JSON.stringify({
      id: response.data.user_id,
      email: response.data.email,
      isAdmin: response.data.is_admin
    }));
    return response.data;
  } catch (error) {
    throw error.response?.data || { message: 'Login failed' };
  }
},
logout: () => {
  localStorage.removeItem('token');
  localStorage.removeItem('userData');
},

  // Корзина
  getCart() {
    return apiInstance.get('/cart');
  },

  addToCart(versionId, quantity = 1) {
    return apiInstance.post('/cart', { version_id: versionId, quantity });
  },

  // Избранное
  getWishlist() {
    return apiInstance.get('/wishlist');
  },

  addToWishlist(albumId) {
    return apiInstance.post('/wishlist', { album_id: albumId });
  },

  removeFromWishlist(albumId) {
    return apiInstance.delete(`/wishlist/${albumId}`);
  }
};

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.css ===
/* Базовые стили для всего приложения */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: 'Arial', sans-serif;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main-content {
  flex: 1;
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.js ===
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar/Navbar';
import PopupAuth from './components/PopupAuth/PopupAuth';
import Home from './pages/Home/Home';
import Catalog from './pages/Catalog/Catalog';
import Product from './pages/Product/Product';
import Cart from './pages/Cart/Cart';
import AdminPanel from './pages/AdminPanel/AdminPanel';
import Profile from './pages/Profile/Profile';
import Wishlist from './pages/Wishlist/Wishlist';
import ArtistPage from './pages/ArtistPage/ArtistPage';
import './App.css';

function App() {
  const [isAuthPopupOpen, setAuthPopupOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);

  // Проверяем localStorage при загрузке
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      const userData = JSON.parse(localStorage.getItem('userData'));
      setCurrentUser(userData);
    }
  }, []);

  // Обработчик входа
  const handleLogin = (userData) => {
    localStorage.setItem('token', userData.access_token);
    localStorage.setItem('userData', JSON.stringify(userData));
    setCurrentUser(userData);
    setAuthPopupOpen(false);
  };

  // Обработчик выхода
  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userData');
    setCurrentUser(null);
  };

  // Защищенный роут
  const ProtectedRoute = ({ children, adminOnly = false }) => {
    if (!currentUser) {
      setAuthPopupOpen(true);
      return <Navigate to="/" />;
    }
    
    if (adminOnly && !currentUser.is_admin) {
      return <Navigate to="/" />;
    }

    return children;
  };

  return (
    <Router>
      <div className="app">
        <Navbar
          currentUser={currentUser}
          onAuthClick={() => setAuthPopupOpen(true)}
          onLogout={handleLogout}
        />

        {isAuthPopupOpen && (
          <PopupAuth
            onClose={() => setAuthPopupOpen(false)}
            onLogin={handleLogin}
          />
        )}

        <main className="main-content">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/artist/:id" element={<ArtistPage />} />
            <Route path="/catalog" element={<Catalog />} />
            <Route
              path="/admin"
              element={
                <ProtectedRoute>
                  <AdminPanel />
                </ProtectedRoute>
              }
            />
            <Route
              path="/album/:id"
              element={
                <Product currentUser={currentUser} />
              }
            />

            <Route path="/cart" element={
              <ProtectedRoute>
                <Cart />
              </ProtectedRoute>
            } />

            <Route path="/profile" element={
              <ProtectedRoute>
                <Profile user={currentUser} />
              </ProtectedRoute>
            } />

            <Route path="/wishlist" element={
              <ProtectedRoute>
                <Wishlist />
              </ProtectedRoute>
            } />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\App.test.js ===
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\index.css ===
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\logo.svg ===
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\reportWebVitals.js ===
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\setupTests.js ===
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';




=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\ArtistMenu\ArtistMenu.css ===
.artist-menu {
  position: fixed;
  top: 0;
  left: 0;
  width: 280px;
  height: 100vh;
  background: #fff;
  box-shadow: 2px 0 10px rgba(0,0,0,0.1);
  z-index: 1000;
  padding: 20px;
  overflow-y: auto;
}

.close-menu {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.categories-container {
  margin-top: 20px;
}

.category-section {
  margin-bottom: 10px;
}

.category-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background: #f8f8f8;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s;
}

.category-header:hover {
  background: #eee;
}

.toggle-icon {
  font-size: 0.9rem;
}

.artists-list {
  padding: 10px 0 10px 20px;
}

.artist-link {
  display: block;
  padding: 8px 15px;
  color: #333;
  text-decoration: none;
  border-radius: 4px;
  transition: background 0.2s;
}

.artist-link:hover {
  background: #f0f0f0;
  color: #d23669;
}

.loading-menu,
.error-menu {
  padding: 20px;
  text-align: center;
}

.no-artists {
  padding: 10px;
  color: #666;
  font-style: italic;
  text-align: center;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\ArtistMenu\ArtistMenu.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../api';
import './ArtistMenu.css';

const ArtistMenu = ({ onClose }) => {
  const [categories, setCategories] = useState([]);
  const [artists, setArtists] = useState({});
  const [expandedCategory, setExpandedCategory] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await api.getArtistCategories();
        setCategories(response.data);
      } catch (err) {
        setError(err.message);
        console.error('Error fetching categories:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  const loadArtists = async (categoryId) => {
    if (!artists[categoryId]) {
      try {
        const response = await api.getArtistsByCategory(categoryId);
        setArtists(prev => ({
          ...prev,
          [categoryId]: response.data
        }));
      } catch (err) {
        console.error(`Error fetching artists for category ${categoryId}:`, err);
        setArtists(prev => ({
          ...prev,
          [categoryId]: [] // Устанавливаем пустой массив в случае ошибки
        }));
      }
    }
  };

  const handleCategoryClick = (categoryId) => {
    if (expandedCategory === categoryId) {
      setExpandedCategory(null);
    } else {
      loadArtists(categoryId);
      setExpandedCategory(categoryId);
    }
  };

  if (loading) return <div className="loading-menu">Загрузка...</div>;
  if (error) return <div className="error-menu">Ошибка загрузки: {error}</div>;

  return (
    <div className="artist-menu">
      <button className="close-menu" onClick={onClose}>×</button>
      <h3>Категории исполнителей</h3>
      
      <div className="categories-container">
        {categories.map(category => (
          <div key={category.id} className="category-section">
            <div 
              className="category-header"
              onClick={() => handleCategoryClick(category.id)}
            >
              {category.name}
              <span className="toggle-icon">
                {expandedCategory === category.id ? '▼' : '►'}
              </span>
            </div>
            
            {expandedCategory === category.id && (
              <div className="artists-list">
                {artists[category.id]?.length > 0 ? (
                  artists[category.id].map(artist => (
                    <Link
                      key={artist.id}
                      to={`/artist/${artist.id}`}
                      className="artist-link"
                      onClick={onClose}
                    >
                      {artist.name}
                    </Link>
                  ))
                ) : (
                  <div className="no-artists">Нет артистов в этой категории</div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default ArtistMenu;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\Error\Error.jsx ===
const Error = ({ message, onRetry }) => (
  <div className="error">
    <p>{message}</p>
    {onRetry && <button onClick={onRetry}>Попробовать снова</button>}
  </div>
);

export default Error;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\Navbar\Navbar.css ===
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  background: linear-gradient(135deg, #ff4e7a 0%, #ff6b6b 100%);
  color: white;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 1000;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.navbar-left, .navbar-center, .navbar-right {
  display: flex;
  align-items: center;
}

.menu-button {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  padding: 0.6rem 1.2rem;
  border-radius: 25px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 1rem;
}

.menu-button:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
}

.logo {
  font-size: 1.8rem;
  font-weight: 800;
  color: white;
  text-decoration: none;
  letter-spacing: 1px;
  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s ease;
}

.logo:hover {
  transform: scale(1.05);
}

.navbar-right {
  gap: 1.5rem;
}

.search-button, 
.auth-button, 
.wishlist-button, 
.cart-button,
.profile-button,
.logout-button {
  background: none;
  border: none;
  color: white;
  font-size: 1.4rem;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  padding: 0.5rem;
}

.search-button:hover, 
.auth-button:hover, 
.wishlist-button:hover, 
.cart-button:hover,
.profile-button:hover,
.logout-button:hover {
  transform: translateY(-2px) scale(1.1);
}

.wishlist-button::after, 
.cart-button::after {
  content: attr(data-count);
  position: absolute;
  top: -5px;
  right: -5px;
  background: #ffeb3b;
  color: #333;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  font-size: 0.7rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

.wishlist-button:hover {
  animation: pulse 0.5s ease;
  color: #ffeb3b;
}

.cart-button:hover {
  animation: pulse 0.5s ease;
  color: #4caf50;
}

.profile-button:hover {
  color: #2196f3;
}

.logout-button:hover {
  color: #f44336;
}

@media (max-width: 768px) {
  .navbar {
    padding: 0.8rem 1rem;
  }
  
  .menu-button {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }
  
  .logo {
    font-size: 1.5rem;
  }
  
  .navbar-right {
    gap: 1rem;
  }
  
  .search-button, 
  .auth-button, 
  .wishlist-button, 
  .cart-button,
  .profile-button,
  .logout-button {
    font-size: 1.2rem;
  }
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\Navbar\Navbar.jsx ===
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import ArtistMenu from '../ArtistMenu/ArtistMenu';
import './Navbar.css';

const Navbar = ({ currentUser, onAuthClick, onLogout }) => {
  const [isMenuOpen, setMenuOpen] = useState(false);

  return (
    <nav className="navbar">
      <div className="navbar-left">
        <button 
          className="menu-button"
          onClick={() => setMenuOpen(!isMenuOpen)}
        >
          ☰ Группы
        </button>
        {isMenuOpen && <ArtistMenu onClose={() => setMenuOpen(false)} />}
      </div>
      
      <div className="navbar-center">
        <Link to="/" className="logo">KpopShop</Link>
      </div>
      
      <div className="navbar-right">
        <button className="search-button">🔍</button>
        
        {currentUser ? (
          <>
            <Link to="/wishlist" className="wishlist-button">❤️</Link>
            <Link to="/cart" className="cart-button">🛒</Link>
            <Link to="/profile" className="profile-button">👤</Link>
            {currentUser.isAdmin && (
              <Link to="/admin" className="nav-link">
                Админ-панель
              </Link>
            )}
            <button className="logout-button" onClick={onLogout}>🚪</button>
          </>
        ) : (
          <button className="auth-button" onClick={onAuthClick}>👤</button>
        )}
      </div>
    </nav>
  );
};

export default Navbar;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\PopupAuth\PopupAuth.css ===
/* PopupAuth.css */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  backdrop-filter: blur(5px);
}

.popup-auth {
  width: 100%;
  max-width: 420px;
  background: linear-gradient(145deg, #1a1a2e, #16213e);
  padding: 2.5rem;
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  color: white;
  position: relative;
  animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

.close-btn {
  position: absolute;
  top: 20px;
  right: 20px;
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  transition: transform 0.2s;
}

.close-btn:hover {
  transform: scale(1.2);
}

.popup-auth h2 {
  font-size: 1.8rem;
  margin-bottom: 1.5rem;
  text-align: center;
  font-weight: 600;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  font-size: 0.95rem;
}

.popup-auth input {
  width: 100%;
  padding: 0.8rem 1rem;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
  color: white;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.popup-auth input:focus {
  outline: none;
  border-color: #4cc9f0;
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 0 0 3px rgba(76, 201, 240, 0.2);
}

.popup-auth input::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

/* .auth-button {
  width: 100%;
  padding: 1rem;
  background: linear-gradient(to right, #4cc9f0, #4361ee);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-top: 1rem;
} */

/* .auth-button:hover {
  background: linear-gradient(to right, #3aa8d8, #3a56e8);
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
} */

.error-message {
  color: #f72585;
  background: rgba(247, 37, 133, 0.1);
  padding: 0.8rem;
  border-radius: 8px;
  margin-bottom: 1.5rem;
  text-align: center;
  font-size: 0.9rem;
}

.auth-toggle {
  text-align: center;
  margin-top: 1.5rem;
  font-size: 0.9rem;
  color: rgba(255, 255, 255, 0.7);
}

.toggle-button {
  background: none;
  border: none;
  color: #4cc9f0;
  cursor: pointer;
  font-weight: 600;
  padding: 0.2rem 0.4rem;
  transition: all 0.2s;
}

.toggle-button:hover {
  color: #3aa8d8;
  text-decoration: underline;
}

.auth-info {
  margin-top: 1.5rem;
  font-size: 0.85rem;
  text-align: center;
  color: rgba(255, 255, 255, 0.6);
  line-height: 1.5;
}

@media (max-width: 480px) {
  .popup-auth {
    width: 90%;
    padding: 1.5rem;
  }
  
  .popup-auth h2 {
    font-size: 1.5rem;
  }
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\components\PopupAuth\PopupAuth.jsx ===
import React, { useState } from 'react';
import api from '../../api';  
import './PopupAuth.css';
import PropTypes from 'prop-types';

const PopupAuth = ({ onClose, onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [firstName, setFirstName] = useState(''); // Изменил username на firstName
  const [lastName, setLastName] = useState(''); // Добавил поле для фамилии

const handleLogin = async (e) => {
  e.preventDefault();
  setError('');
  try {
    const response = await api.login(email, password);
    onLogin({
      id: response.user_id,
      email: response.email,
      isAdmin: response.is_admin || false
    });
    onClose();
  } catch (err) {
    setError(err.message || 'Неверный email или пароль');
  }
};

  const handleRegister = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const response = await api.register({ 
        email, 
        password, 
        first_name: firstName, // Используем first_name вместо username
        last_name: lastName 
      });
      // После регистрации автоматически входим
      await handleLogin(e);
    } catch (err) {
      setError(err.message || 'Ошибка регистрации');
    }
  };

  const toggleAuthMode = () => {
    setIsRegistering(!isRegistering);
    setError('');
  };

  return (
    <div className="popup-overlay">
      <div className="popup-auth">
        <button className="close-btn" onClick={onClose}>×</button>
        <h2>{isRegistering ? 'Регистрация' : 'Вход'}</h2>
        
        {error && <p className="error-message">{error}</p>}

        <form onSubmit={isRegistering ? handleRegister : handleLogin}>
          {isRegistering && (
            <>
              <div className="form-group">
                <label>Имя</label>
                <input
                  type="text"
                  placeholder="Введите имя"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  required
                />
              </div>
              <div className="form-group">
                <label>Фамилия</label>
                <input
                  type="text"
                  placeholder="Введите фамилию"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                />
              </div>
            </>
          )}

          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              placeholder="Введите email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>Пароль</label>
            <input
              type="password"
              placeholder="Введите пароль"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              minLength={6}
            />
          </div>

          <button type="submit" className="auth-button">
            {isRegistering ? 'Зарегистрироваться' : 'Войти'}
          </button>
        </form>

        <div className="auth-toggle">
          {isRegistering ? 'Уже есть аккаунт? ' : 'Нет аккаунта? '}
          <button type="button" onClick={toggleAuthMode} className="toggle-button">
            {isRegistering ? 'Войти' : 'Зарегистрироваться'}
          </button>
        </div>
      </div>
    </div>
  );
};


PopupAuth.propTypes = {
  onClose: PropTypes.func.isRequired,
  onLogin: PropTypes.func // Не required, если может быть undefined
};
export default PopupAuth;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\AdminPanel\AdminPanel.css ===
.admin-panel {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f8f9fa;
}

.form-section {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 30px;
}

.list-section {
  display: grid;
  gap: 20px;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
}

.list-item {
  background: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.list-item h4 {
  margin: 0 0 10px 0;
  color: #2c3e50;
}

.list-item p {
  margin: 5px 0;
  color: #7f8c8d;
}

.version-input {
  display: grid;
  grid-template-columns: 1fr 120px;
  gap: 15px;
  margin-bottom: 15px;
}

.preview-image {
  width: 100%;
  max-height: 200px;
  object-fit: cover;
  border-radius: 4px;
  margin-top: 10px;
}

.MuiButton-root {
  text-transform: none !important;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\AdminPanel\AdminPanel.jsx ===
import React, { useState, useEffect } from 'react';
import { Tab, Tabs, Box, TextField, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import api from '../../api';
import './AdminPanel.css';

const AdminPanel = () => {
  const [tabValue, setTabValue] = useState(0);
  
  // Состояния для артистов
  const [artists, setArtists] = useState([]);
  const [newArtist, setNewArtist] = useState({
    name: '',
    category: 'female_group',
    description: '',
    image_url: ''
  });

  // Состояния для альбомов
  const [albums, setAlbums] = useState([]);
  const [newAlbum, setNewAlbum] = useState({
    artist_id: '',
    title: '',
    base_price: '',
    description: '',
    main_image_url: '',
    versions: [{ version_name: '', price_diff: 0 }]
  });

  // Состояния для скидок
  const [discounts, setDiscounts] = useState([]);
  const [newDiscount, setNewDiscount] = useState({
    album_version_id: '',
    percentage: '',
    start_date: '',
    end_date: ''
  });

  // Загрузка данных при монтировании
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [artistsRes, albumsRes, discountsRes] = await Promise.all([
          api.get('/admin/artists'),
          api.get('/albums'),
          api.get('/discounts')
        ]);
        setArtists(artistsRes.data);
        setAlbums(albumsRes.data);
        setDiscounts(discountsRes.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    fetchData();
  }, []);

  // Обработчики для артистов
  const handleCreateArtist = async () => {
    if (!newArtist.name) {
      alert('Название группы обязательно');
      return;
    }
    
    try {
      const response = await api.post('/admin/artists', newArtist);
      setArtists([...artists, response.data]);
      setNewArtist({
        name: '',
        category: 'female_group',
        description: '',
        image_url: ''
      });
    } catch (error) {
      console.error('Error creating artist:', error.response?.data);
    }
  };

  // Обработчики для альбомов
  const handleAlbumVersionChange = (index, field, value) => {
    const newVersions = [...newAlbum.versions];
    newVersions[index][field] = value;
    setNewAlbum({ ...newAlbum, versions: newVersions });
  };

  const handleCreateAlbum = async () => {
    if (!newAlbum.artist_id || !newAlbum.title || !newAlbum.base_price || newAlbum.versions.length === 0) {
      alert('Заполните обязательные поля');
      return;
    }

    try {
      const response = await api.post('/admin/albums', newAlbum);
      setAlbums([...albums, response.data]);
      setNewAlbum({
        artist_id: '',
        title: '',
        base_price: '',
        description: '',
        main_image_url: '',
        versions: [{ version_name: '', price_diff: 0 }]
      });
    } catch (error) {
      console.error('Error creating album:', error.response?.data);
    }
  };

  // Обработчики для скидок
  const handleCreateDiscount = async () => {
    if (!newDiscount.album_version_id || !newDiscount.percentage || !newDiscount.start_date || !newDiscount.end_date) {
      alert('Заполните все обязательные поля');
      return;
    }

    try {
      const response = await api.post('/admin/discounts', newDiscount);
      setDiscounts([...discounts, response.data]);
      setNewDiscount({
        album_version_id: '',
        percentage: '',
        start_date: '',
        end_date: ''
      });
    } catch (error) {
      console.error('Error creating discount:', error.response?.data);
    }
  };

  return (
    <div className="admin-panel">
      <h2>Административная панель</h2>
      
      <Tabs value={tabValue} onChange={(e, newVal) => setTabValue(newVal)}>
        <Tab label="Артисты" />
        <Tab label="Альбомы" />
        <Tab label="Скидки" />
      </Tabs>

      {/* Вкладка артистов */}
      {tabValue === 0 && (
        <Box p={3}>
          <h3>Управление артистами</h3>
          
          <div className="form-section">
            <TextField
              label="Название группы*"
              value={newArtist.name}
              onChange={(e) => setNewArtist({...newArtist, name: e.target.value})}
              fullWidth
              margin="normal"
            />
            
            <FormControl fullWidth margin="normal">
              <InputLabel>Категория</InputLabel>
              <Select
                value={newArtist.category}
                onChange={(e) => setNewArtist({...newArtist, category: e.target.value})}
              >
                <MenuItem value="female_group">Женская группа</MenuItem>
                <MenuItem value="male_group">Мужская группа</MenuItem>
                <MenuItem value="solo">Сольный артист</MenuItem>
              </Select>
            </FormControl>

            <Button 
              variant="contained" 
              color="primary"
              onClick={handleCreateArtist}
              style={{ marginTop: 20 }}
            >
              Создать артиста
            </Button>
          </div>

          <div className="list-section">
            {artists.map(artist => (
              <div key={artist.id} className="list-item">
                <h4>{artist.name}</h4>
                <p>Категория: {artist.category}</p>
                {artist.image_url && <img src={artist.image_url} alt={artist.name} className="preview-image" />}
              </div>
            ))}
          </div>
        </Box>
      )}

      {/* Вкладка альбомов */}
      {tabValue === 1 && (
        <Box p={3}>
          <h3>Управление альбомами</h3>
          
          <div className="form-section">
            <TextField
              label="ID артиста*"
              value={newAlbum.artist_id}
              onChange={(e) => setNewAlbum({...newAlbum, artist_id: e.target.value})}
              fullWidth
              margin="normal"
            />
            
            <TextField
              label="Название альбома*"
              value={newAlbum.title}
              onChange={(e) => setNewAlbum({...newAlbum, title: e.target.value})}
              fullWidth
              margin="normal"
            />

            <TextField
              label="Базовая цена*"
              type="number"
              value={newAlbum.base_price}
              onChange={(e) => setNewAlbum({...newAlbum, base_price: e.target.value})}
              fullWidth
              margin="normal"
            />

            <h4>Версии альбома</h4>
            {newAlbum.versions.map((version, index) => (
              <div key={index} className="version-input">
                <TextField
                  label="Название версии*"
                  value={version.version_name}
                  onChange={(e) => handleAlbumVersionChange(index, 'version_name', e.target.value)}
                  fullWidth
                  margin="dense"
                />
                <TextField
                  label="Доплата за версию"
                  type="number"
                  value={version.price_diff}
                  onChange={(e) => handleAlbumVersionChange(index, 'price_diff', e.target.value)}
                  margin="dense"
                />
              </div>
            ))}

            <Button 
              variant="outlined" 
              onClick={() => setNewAlbum({
                ...newAlbum,
                versions: [...newAlbum.versions, { version_name: '', price_diff: 0 }]
              })}
            >
              Добавить версию
            </Button>

            <Button 
              variant="contained" 
              color="primary"
              onClick={handleCreateAlbum}
              style={{ marginTop: 20 }}
            >
              Создать альбом
            </Button>
          </div>

          <div className="list-section">
            {albums.map(album => (
              <div key={album.id} className="list-item">
                <h4>{album.title}</h4>
                <p>Артист: {album.artist_id}</p>
                <p>Базовая цена: ${album.base_price}</p>
                {album.main_image_url && <img src={album.main_image_url} alt={album.title} className="preview-image" />}
              </div>
            ))}
          </div>
        </Box>
      )}

      {/* Вкладка скидок */}
      {tabValue === 2 && (
        <Box p={3}>
          <h3>Управление скидками</h3>
          
          <div className="form-section">
            <TextField
              label="ID версии альбома*"
              value={newDiscount.album_version_id}
              onChange={(e) => setNewDiscount({...newDiscount, album_version_id: e.target.value})}
              fullWidth
              margin="normal"
            />
            
            <TextField
              label="Процент скидки*"
              type="number"
              value={newDiscount.percentage}
              onChange={(e) => setNewDiscount({...newDiscount, percentage: e.target.value})}
              fullWidth
              margin="normal"
            />

            <TextField
              label="Дата начала*"
              type="date"
              InputLabelProps={{ shrink: true }}
              value={newDiscount.start_date}
              onChange={(e) => setNewDiscount({...newDiscount, start_date: e.target.value})}
              fullWidth
              margin="normal"
            />

            <TextField
              label="Дата окончания*"
              type="date"
              InputLabelProps={{ shrink: true }}
              value={newDiscount.end_date}
              onChange={(e) => setNewDiscount({...newDiscount, end_date: e.target.value})}
              fullWidth
              margin="normal"
            />

            <Button 
              variant="contained" 
              color="primary"
              onClick={handleCreateDiscount}
              style={{ marginTop: 20 }}
            >
              Создать скидку
            </Button>
          </div>

          <div className="list-section">
            {discounts.map(discount => (
              <div key={discount.id} className="list-item">
                <h4>Скидка #{discount.id}</h4>
                <p>Версия альбома: {discount.album_version_id}</p>
                <p>Процент: {discount.percentage}%</p>
                <p>Действует с {new Date(discount.start_date).toLocaleDateString()} по {new Date(discount.end_date).toLocaleDateString()}</p>
              </div>
            ))}
          </div>
        </Box>
      )}
    </div>
  );
};

export default AdminPanel;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\ArtistPage\ArtistPage.css ===
.artist-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.artist-header {
  text-align: center;
  margin-bottom: 30px;
}

.artist-category {
  color: #666;
  font-style: italic;
}

.artist-image img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
}

.albums-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  margin-top: 30px;
}

.album-card {
  border: 1px solid #eee;
  padding: 15px;
  border-radius: 8px;
}

.loading, .error {
  text-align: center;
  padding: 50px;
  font-size: 1.2rem;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\ArtistPage\ArtistPage.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../../api';
import './ArtistPage.css';

const ArtistPage = () => {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.getArtist(id);
        setData(response.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [id]);

  if (loading) return <div className="loading">Загрузка...</div>;
  if (error) return <div className="error">Ошибка: {error}</div>;
  if (!data) return <div className="error">Исполнитель не найден</div>;

  const { artist, albums } = data;

  return (
    <div className="artist-page">
      <div className="artist-header">
        <h1>{artist.name}</h1>
        <p className="artist-category">
          {artist.category === 'female_group' && 'Женская группа'}
          {artist.category === 'male_group' && 'Мужская группа'}
          {artist.category === 'solo' && 'Сольный исполнитель'}
        </p>
      </div>

      {artist.description && (
        <div className="artist-description">
          <p>{artist.description}</p>
        </div>
      )}

      <div className="artist-image">
        <img 
          src={artist.image_url || '/default-artist.jpg'} 
          alt={artist.name}
        />
      </div>

      <h2>Альбомы</h2>
      {albums && albums.length > 0 ? (
        <div className="albums-grid">
          {albums.map(album => (
            <div key={album.id} className="album-card">
              <Link to={`/album/${album.id}`}>
                <img 
                  src={album.main_image_url || '/default-album.jpg'} 
                  alt={album.title}
                />
                <h3>{album.title}</h3>
                <p>{new Date(album.release_date).toLocaleDateString()}</p>
              </Link>
            </div>
          ))}
        </div>
      ) : (
        <p>У исполнителя пока нет альбомов</p>
      )}
    </div>
  );
};

export default ArtistPage;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Cart\Cart.css ===


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Cart\Cart.jsx ===
import React from 'react';
import './Cart.css';

const Cart = () => {
  return (
    <div className="cart-page">
      <h2>Корзина</h2>
      {/* Список товаров в корзине */}
    </div>
  );
};

export default Cart;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Catalog\Catalog.css ===


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Catalog\Catalog.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../api'; 
import './Catalog.css';

const Catalog = () => {
  const [albums, setAlbums] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchAlbums = async () => {
      try {
        const response = await api.getAlbums();
        setAlbums(response.data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAlbums();
  }, []);

  if (loading) return <div className="loading">Загрузка...</div>;
  if (error) return <div className="error">Ошибка: {error}</div>;

  return (
    <div className="catalog">
      <h2>Каталог альбомов</h2>
      <div className="album-grid">
        {albums.map(album => (
          <div key={album.id} className="album-card">
            <Link to={`/product/${album.id}`}>
              <img 
                src={album.main_image_url || '/placeholder-album.jpg'} 
                alt={album.title}
              />
              <h3>{album.title}</h3>
              <p>{album.artist}</p>
              <p>${album.base_price}</p>
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Catalog;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Home\Home.css ===


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Home\Home.jsx ===
import React from 'react';
import './Home.css';

const Home = () => {
  return (
    <div className="home">
      <h1 className="main-title">Добро пожаловать в KpopShop</h1>
      <p className="subtitle">Лучшие K-POP альбомы по доступным ценам</p>
    </div>
  );
};

export default Home;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Product\Product.css ===
.product-page {
  display: flex;
  gap: 2rem;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.product-image {
  flex: 1;
}
.product-image img {
  width: 100%;
  max-width: 500px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-info {
  flex: 1;
}

.version-selector {
  margin: 1.5rem 0;
}
.version-buttons {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
  margin-top: 0.5rem;
}
.version-buttons button {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  background: white;
  border-radius: 4px;
  cursor: pointer;
}
.version-buttons button.active {
  background: #333;
  color: white;
  border-color: #333;
}

.version-info {
  background: #f8f8f8;
  padding: 1rem;
  border-radius: 8px;
  margin: 1rem 0;
}
.version-info p {
  margin: 0.5rem 0;
}

.price {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 1rem 0;
}

.limited-edition {
  color: #e63946;
  font-weight: bold;
}

.add-to-cart {
  background: #4CAF50;
  color: white;
  border: none;
  padding: 1rem 2rem;
  font-size: 1rem;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 1rem;
}
.add-to-cart:hover {
  background: #45a049;
}

.out-of-stock {
  background: #f44336;
  color: white;
  border: none;
  padding: 1rem 2rem;
  font-size: 1rem;
  border-radius: 4px;
  cursor: not-allowed;
  margin-top: 1rem;
}

.loading, .error {
  text-align: center;
  padding: 2rem;
  font-size: 1.2rem;
}
.error {
  color: #f44336;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Product\Product.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import api from '../../api';
import './Product.css';

const Product = ({ currentUser }) => {
  const { id } = useParams();
  const [album, setAlbum] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedVersion, setSelectedVersion] = useState(0);
  const [cartMessage, setCartMessage] = useState(null);

  useEffect(() => {
    const fetchAlbum = async () => {
      try {
        const response = await api.getAlbum(id);
        setAlbum(response.data);
      } catch (err) {
        setError(err.response?.data?.message || err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchAlbum();
  }, [id]);

  const handleAddToCart = async () => {
    if (!currentUser) {
      setCartMessage('Для добавления в корзину войдите в аккаунт');
      return;
    }

    if (!album?.versions?.[selectedVersion]?.id) {
      setCartMessage('Ошибка: не выбрана версия товара');
      return;
    }

    setCartMessage(null); // Сбрасываем предыдущие сообщения

    try {
      const response = await api.post('/cart', {
        version_id: album.versions[selectedVersion].id,
        quantity: 1
      }, {
        validateStatus: (status) => status < 500 // Обрабатываем 4xx ошибки нормально
      });

      if (response.status >= 200 && response.status < 300) {
        setCartMessage('Товар успешно добавлен в корзину!');
      } else {
        setCartMessage(response.data?.message || 'Произошла ошибка');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || 
                         error.message || 
                         'Ошибка соединения с сервером';
      setCartMessage(errorMessage);
      
      console.error('Full error details:', {
        status: error.response?.status,
        data: error.response?.data,
        config: error.config,
        stack: error.stack
      });
    } finally {
      if (cartMessage) {
        setTimeout(() => setCartMessage(null), 5000);
      }
    }
  };

  const calculateTotalPrice = () => {
    try {
      const basePrice = parseFloat(album?.base_price) || 0;
      const versionPriceDiff = parseFloat(album?.versions?.[selectedVersion]?.price_diff) || 0;
      return (basePrice + versionPriceDiff).toFixed(2);
    } catch (e) {
      console.error('Error calculating price:', e);
      return '0.00';
    }
  };

  if (loading) return <div className="loading">Загрузка...</div>;
  if (error) return <div className="error">Ошибка: {error}</div>;
  if (!album) return <div className="error">Альбом не найден</div>;

  const totalPrice = calculateTotalPrice();
  const currentVersion = album.versions?.[selectedVersion];
  const isInStock = currentVersion?.stock_quantity > 0;

  return (
    <div className="product-page">
      <div className="product-image">
        <img 
          src={currentVersion?.images?.[0] || album.main_image_url} 
          alt={album.title} 
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = '/placeholder-album.jpg';
          }}
        />
      </div>
      
      <div className="product-info">
        <h1>{album.title}</h1>
        <h2>{album.artist_name}</h2>
        
        {album.versions?.length > 1 && (
          <div className="version-selector">
            <h3>Выберите версию:</h3>
            <div className="version-buttons">
              {album.versions.map((version, index) => (
                <button
                  key={version.id}
                  className={selectedVersion === index ? 'active' : ''}
                  onClick={() => setSelectedVersion(index)}
                >
                  {version.version_name}
                </button>
              ))}
            </div>
          </div>
        )}

        {currentVersion && (
          <div className="version-info">
            <h3>Версия: {currentVersion.version_name}</h3>
            {currentVersion.packaging_details && (
              <p><strong>Упаковка:</strong> {currentVersion.packaging_details}</p>
            )}
            {currentVersion.is_limited && (
              <p className="limited-edition">⏳ Ограниченный тираж</p>
            )}
          </div>
        )}

        <p className="price">${totalPrice}</p>
        <p className="description">{album.description}</p>
        
        {cartMessage && (
          <div className={`cart-message ${
            cartMessage.includes('успешно') ? 'success' : 
            cartMessage.includes('Ошибка') ? 'error' : 'info'
          }`}>
            {cartMessage}
          </div>
        )}

        {isInStock ? (
          <button 
            className="add-to-cart"
            onClick={handleAddToCart}
            disabled={!currentUser || loading}
          >
            {loading ? 'Добавляем...' : 'Добавить в корзину'}
          </button>
        ) : (
          <button className="out-of-stock" disabled>
            Нет в наличии
          </button>
        )}
      </div>
    </div>
  );
};

export default Product;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Profile\Profile.css ===
.profile-page {
  max-width: 1000px;
  margin: 0 auto;
  padding: 20px;
}

.profile-section, .orders-section, .actions-section {
  margin-bottom: 30px;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.user-info p {
  margin: 10px 0;
  font-size: 1.1rem;
}

.orders-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 15px;
}

.order-card {
  padding: 15px;
  background: white;
  border-radius: 5px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.edit-profile-btn {
  padding: 10px 20px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.edit-profile-btn:hover {
  background: #45a049;
}

.loading {
  text-align: center;
  padding: 50px;
  font-size: 1.2rem;
}

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Profile\Profile.jsx ===
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import api from '../../api';
import './Profile.css';

const Profile = ({ user }) => {
  const [userData, setUserData] = useState(null);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Загрузка данных пользователя
        const ordersResponse = await api.getOrders();
        setOrders(ordersResponse.data || []);
        setUserData(user);
      } catch (error) {
        console.error('Error fetching profile data:', error);
      } finally {
        setLoading(false);
      }
    };

    if (user) {
      fetchData();
    }
  }, [user]);

  if (loading) return <div className="loading">Загрузка...</div>;

  return (
    <div className="profile-page">
      <h2>Личный кабинет</h2>
      {userData?.is_admin && (
      <div className="admin-section">
        <h3>Административные функции</h3>
        <Link to="/admin" className="admin-link">
          Перейти в админ-панель
        </Link>
      </div>
    )}
      <div className="profile-section">
        <h3>Личные данные</h3>
        <div className="user-info">
          <p><strong>Имя:</strong> {userData?.first_name || 'Не указано'}</p>
          <p><strong>Фамилия:</strong> {userData?.last_name || 'Не указано'}</p>
          <p><strong>Email:</strong> {userData?.email}</p>
        </div>
      </div>

      <div className="orders-section">
        <h3>Мои заказы</h3>
        {orders.length > 0 ? (
          <div className="orders-list">
            {orders.map(order => (
              <div key={order.id} className="order-card">
                <p>Заказ #{order.id} - {order.status}</p>
                <p>Сумма: ${order.total_amount}</p>
                <Link to={`/order/${order.id}`}>Подробнее</Link>
              </div>
            ))}
          </div>
        ) : (
          <p>У вас пока нет заказов</p>
        )}
      </div>

      <div className="actions-section">
        <button className="edit-profile-btn">Редактировать профиль</button>
      </div>
    </div>
  );
};

export default Profile;

=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Wishlist\Wishlist.css ===


=== C:\Users\katy\Documents\GitHub\Kpop_Shop\frontend\src\pages\Wishlist\Wishlist.jsx ===
import React from 'react';
import './Wishlist.css';

const Wishlist = () => {
  return (
    <div className="wishlist-page">
      <h2>Избранное</h2>
      {/* Список избранных альбомов */}
    </div>
  );
};

export default Wishlist;

